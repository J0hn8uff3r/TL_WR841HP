
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<script language="Javascript"><!--
function is_key_valid(key)
{
    var c; var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`-=\\[];',./~!@#$%^&*()_+|{}:\"<>? "; 
    for (var i = 0; i < key.length; i++)
    {
        c = key.charAt(i);
        if (ch.indexOf(c) == -1)
        { 
            alert(js_invalid_input="invalid input, retry please!");
            return false; 
        }
    } 
    return true; 
}
function doBack(nPage)
{
	location.href="IpsecRpm.htm?Page="+nPage;
}
function getElem(obj)
{
	return document.getElementById(obj);
}
function getValLen(val)
{
	var len = 0;
	var i = 0;
	for (i = 0; i < val.length; i ++)
	{
		var c = val.charAt(i);
		len += ((c >= ' ') && (c <= '~')) ? 1 : 2;
	}
	return len;
}
function doHelp(){location.href="../help/IpsecHelpRpm.htm";}

var auth_list_param = new Array(
"<span id=\"t_auto\">AUTO</span>",
"MD5",
"SHA1"
);
var encrypt_list_param = new Array(
"<span id=\"t_auto\">AUTO</span>",
"<span id=\"t_none\">NONE</span>",
"DES",
"3DES",
"AES128",
"AES192",
"AES256"
);
var pfs_group_list_param = new Array(
"<span id=\"t_none\">NONE</span>",
"DH1",
"DH2",
"DH5"
);
function printfAuthList(isIke)
{
	var i;
    if (isIke) i = 0;
    else i = 1;     /* skip AUTO */
	for ( ; i<auth_list_param.length; ++i)
	{
		document.write('<option value=\"' + i + '\">' + auth_list_param[i] + '<\/option>');
	}
}
function printfEncryptList(isIke)
{
	var i;
    if (isIke) i = 0;
    else i = 1;     /* skip AUTO */
	for ( ; i<encrypt_list_param.length; ++i)
	{
		document.write('<option value=\"' + i + '\">' + encrypt_list_param[i] + '<\/option>');
	}
}
function printfPfsGroupList()
{
	var i;
	var val;
	for (i=0; i<pfs_group_list_param.length; ++i)
	{
		document.write('<option value=\"' + i + '\">' + pfs_group_list_param[i] + '<\/option>');
	}
}
function printfIkeList()
{
	var i;
	if (ipsec_adv_dyn_array[20] == 0)
	{
		document.write('<option value=\"255\" id=\"t_ike_list\">Please set IKE list<\/option>');
		return;
	}
	else
	{
		for (i=0; i<ipsec_adv_dyn_array[20]; ++i)
		{
			document.write('<option value=\"' + i + '\">' + ike_list_array[i] + '<\/option>');
		}
	}
	
}
function style_display_on()
{
	if (window.ActiveXObject)
	{ // IE
		return "block";
	}
	else if (window.XMLHttpRequest)
	{ // Mozilla, Safari,...
		return "table-row";
	}
}
function switchMode()
{
	var strShow = style_display_on();
	var strDispIke = (document.forms[0].ike_enable[0].checked)? strShow:"none";
	var strDispManu = (document.forms[0].ike_enable[1].checked)? strShow:"none";
	
	document.getElementById("id_proto_ike").style.display = strDispIke;
	document.getElementById("id_auth_ike").style.display = strDispIke;
	document.getElementById("id_encrypt_ike").style.display = strDispIke;
	document.getElementById("id_ike_method").style.display = strDispIke;
	document.getElementById("id_pfs").style.display = strDispIke;
	document.getElementById("id_life_time").style.display = strDispIke;
	
	document.getElementById("id_proto").style.display = strDispManu;
	document.getElementById("id_auth").style.display = strDispManu;
	document.getElementById("id_encrypt").style.display = strDispManu;
	document.getElementById("id_in_spi").style.display = strDispManu;
	document.getElementById("id_in_auth_key").style.display = strDispManu;
	document.getElementById("id_in_encrypt_key").style.display = strDispManu;
	document.getElementById("id_out_spi").style.display = strDispManu;
	document.getElementById("id_out_auth_key").style.display = strDispManu;
	document.getElementById("id_out_encrypt_key").style.display = strDispManu;
	
	switchAuthType();
    switchEncryptType();
	switchProto();
    switchProtoIke();
}
function switchProto()
{
	var strShow = style_display_on();
	var strDisp = (1 == document.forms[0].proto_list.value)? strShow:"none";

    if(document.forms[0].ike_enable[0].checked)
    {
        document.getElementById("id_encrypt").style.display = "none";
        document.getElementById("id_in_encrypt_key").style.display = "none";
        document.getElementById("id_out_encrypt_key").style.display = "none";
    }
    else
    {
        document.getElementById("id_encrypt").style.display = strDisp;
        if (document.forms[0].encrypt_list.value > 1)   /* 1 == NONE */
        {
            document.getElementById("id_in_encrypt_key").style.display = strDisp;
            document.getElementById("id_out_encrypt_key").style.display = strDisp;
        }
        else
        {
            document.getElementById("id_in_encrypt_key").style.display = "none";
            document.getElementById("id_out_encrypt_key").style.display = "none";
        }
    }
}
function switchProtoIke()
{
	var strShow = style_display_on();
	var strDisp = (1 == document.forms[0].proto_list_ike.value)? strShow:"none";

    if(document.forms[0].ike_enable[0].checked)
    {
        document.getElementById("id_encrypt_ike").style.display = strDisp;
    }
    else
    {
        document.getElementById("id_encrypt_ike").style.display = "none";
    }
}
function switchAuthType()
{
	if (1 == document.forms[0].auth_list.value)
	{
		document.getElementById("span_in_auth_key").innerHTML = "(16 characters)";
		document.getElementById("span_out_auth_key").innerHTML = "(16 characters)";
	}
	else if (2 == document.forms[0].auth_list.value)
	{
		document.getElementById("span_in_auth_key").innerHTML = "(20 characters)";
		document.getElementById("span_out_auth_key").innerHTML = "(20 characters)";
	}
	
}
function switchEncryptType()
{
    var enc_type = document.forms[0].encrypt_list.value;
    var in_desc_span = document.getElementById("span_in_encrypt_key");
    var out_desc_span = document.getElementById("span_out_encrypt_key");
    var strShow = style_display_on();
    var strDispEncKey = ((enc_type>1)&&(document.forms[0].ike_enable[1].checked))? strShow:"none";

    document.getElementById("id_in_encrypt_key").style.display = strDispEncKey;
    document.getElementById("id_out_encrypt_key").style.display = strDispEncKey;

    if (1 == enc_type) // NONE
    {
        in_desc_span.innerHTML = "";
        out_desc_span.innerHTML = "";
    }
	else if (2 == enc_type) // DES
	{
		in_desc_span.innerHTML = "(8 characters)";
		out_desc_span.innerHTML = "(8 characters)";
	}
	else if(3 == enc_type) // 3DES
	{
		in_desc_span.innerHTML = "(24 characters)";
		out_desc_span.innerHTML = "(24 characters)";
	}
    else if(4 == enc_type) // AES128
    {
        in_desc_span.innerHTML = "(16 characters)";
        out_desc_span.innerHTML = "(16 characters)";
    }
    else if(5 == enc_type) // AES192
    {
        in_desc_span.innerHTML = "(24 characters)";
        out_desc_span.innerHTML = "(24 characters)";
    }
    else if(6 == enc_type) // AES256
    {
        in_desc_span.innerHTML = "(32 characters)";
        out_desc_span.innerHTML = "(32 characters)";
    }
}
function doSubmit()
{
	var DF = document.forms[0];
	var str_len = 0;
	var elem;
    var expected_len;
	
	/* Security policy name */
	str_len = getValLen(DF.ipsec_name.value);
	elem = DF.ipsec_name;
	
	
	if (str_len == 0)
	{
		alert(js_policy_name_error="Please input the correct security policy name!");
		if(elem)
		{
			elem.focus();
			elem.select();
		}
		return false;
	}	
	if (str_len > 31)
	{
		alert(js_name_length_error="The mas length of security policy name is 31!");
		if(elem)
		{
			elem.focus();
			elem.select();
		}
		return false;
	}
	

	if (!(DF.local_net_ip.value.length) && (!DF.peer_net_ip.value.length))
	{
		alert(js_input_ip="Please input the IP address!");
		elem = DF.local_net_ip;
		if(elem)
		{
			elem.focus();
			elem.select();
		}
		return false;
	}
	else
	{
		if (DF.local_net_ip.value.length)
		{
			if (false == is_ipaddr(DF.local_net_ip.value))
			{
				elem = DF.local_net_ip;
				if(elem)
				{
					elem.focus();
					elem.select();
				}
				return false;
			}
			if (DF.local_net_msk.value.length)
			{
                if (!is_number(DF.local_net_msk.value, 1, 32))
				{
					alert(js_input_mask="Please input the correct bits of subnet mask(1-32)!");
					elem = DF.local_net_msk;
					if(elem)
					{
						elem.focus();
						elem.select();
					}
					return false;
				}
			}
            else
            {
                alert(js_mask_error="Please input the correct bits of subnet mask(1-32)!");
                elem = DF.local_net_msk;
                if(elem)
                {
                    elem.focus();
                    elem.select();
                }
                return false;
            }
		}
		if (DF.peer_net_ip.value.length)
		{
			if (false == is_ipaddr(DF.peer_net_ip.value))
			{
				elem = DF.peer_net_ip;
				if(elem)
				{
					elem.focus();
					elem.select();
				}
				return false;
			}
			if (DF.peer_net_msk.value.length)
			{
                if (!is_number(DF.peer_net_msk.value, 1, 32))
				{
					alert(js_mask_error="Please input the correct bits of subnet mask(1-32)!");
					elem = DF.peer_net_msk;
					if(elem)
					{
						elem.focus();
						elem.select();
					}
					return false;
				}
			}
            else
            {
                alert(js_mask_error="Please input the correct bits of subnet mask(1-32)!");
                elem = DF.peer_net_msk;
                if(elem)
                {
                    elem.focus();
                    elem.select();
                }
                return false;
            }
		}
	}
	
	//added by ZQQ 07.12.24 To authentication the IP is valid when the server is an IP address
	var ch = ".0123456789";
	var c;
	var n = 0;
	var szarray = new Array();
	szarray[0,0,0,0];
	var str = DF.peer_gw.value;
	var obj = DF.peer_gw;
	if (str == "")
	{
		alert(js_input_domain="Please input the IP address or domain name of server!");
		obj.focus();
		obj.select();
		return false;
	}
	if (!is_domain(str))
	{
		obj.focus();
		obj.select();
		return false;
	}
	for(var i=0; i<str.length; i++)
	{
		c = str.charAt(i);
		if (ch.indexOf(c) == -1)
		{
			n = 0;
			break;
		}
		else
		{
			if(c == '.')
			{
				n++; 
			}
		}
	}
	if(n == 3)     
	{
		for(var j = 0; j < 3; j++)
		{
			var n = str.indexOf(".");
			szarray[j] = str.substring(0,n);
			remain = str.substring(n+1);
			str = remain;
		}
		szarray[3] = remain;
		for(var j = 0; j < 4; j++)
		{
			if(szarray[j] == "" || !is_number(szarray[j], 0, 255))
			{
			   alert(js_server_ip_error="The server IP address is invalid, please retry!");
			   obj.focus();
			   obj.select();
			   return false;
			}
		}
	}
	
	if (DF.ike_enable[0].checked)
	{
		/*lifetime */
		if ((DF.life_time.value > 604800) || (DF.life_time.value < 60))
		{
			alert(js_lifetime_error="Please input the correct lifetime(60-604800)!");
			elem = DF.life_time;
			if(elem)
			{
				elem.focus();
				elem.select();
			}
			return false;
		}
	}
	else 
	{
		/* SPI, authentication */
		if ((DF.in_spi.value > 4294967295) || (DF.in_spi.value < 256))
		{
			alert(js_spi_error="Please input the correct SPI(256-4294967295)!");
			elem = DF.in_spi;
			if(elem)
			{
				elem.focus();
				elem.select();
			}
			return false;
		}
		if ((DF.out_spi.value > 4294967295) || (DF.out_spi.value < 256))
		{
			alert(js_spi_error="Please input the correct SPI(256-4294967295)!");
			elem = DF.out_spi;
			if(elem)
			{
				elem.focus();
				elem.select();
			}
			return false;
		}
        if(DF.in_spi.value == DF.out_spi.value)
        {
            alert(js_diretion_diff="The SPI in-direction and out-direction must be different!");
			elem = DF.out_spi;
            elem.focus();
            elem.select();
			return false;
        }
		
		str_len = getValLen(DF.in_auth_key.value);
		elem = DF.in_auth_key;
		
        if(DF.auth_list.value == 1)
        { expected_len = 16; }
        else if(DF.auth_list.value == 2)
        { expected_len = 20; }

        if(str_len != expected_len)
        {
            alert(js_auth_length_error="The length of authentication key is incorrect!");
            if(elem)
            {
                elem.focus();
                elem.select();
            }
            return false;
        }
		if (str_len > 20)
		{
			alert(js_auth_length_long="The max length of authentication key is 20!");
			if(elem)
			{
				elem.focus();
				elem.select();
			}
			return false;
		}
        if(!is_key_valid(DF.in_auth_key.value))
        {
            if(elem)
            {
                elem.focus();
                elem.select();
            }
            return false;
        }
		
		str_len = getValLen(DF.out_auth_key.value);
		elem = DF.out_auth_key;
		
        if(str_len != expected_len)
        {
            alert(js_auth_length_error="The length of authentication key is incorrect!");
            if(elem)
            {
                elem.focus();
                elem.select();
            }
            return false;
        }
		if (str_len > 20)
		{
			alert(js_auth_length_long="The max length of authentication key is 20!");
			if(elem)
			{
				elem.focus();
				elem.select();
			}
			return false;
		}
        if(!is_key_valid(DF.out_auth_key.value))
        {
            if(elem)
            {
                elem.focus();
                elem.select();
            }
            return false;
        }

		/* ESP */
		if (1 == DF.proto_list.value)
		{
            if(DF.encrypt_list.value == 1) // NONE
            { expected_len = 0; }
            else if(DF.encrypt_list.value == 2) // DES
            { expected_len = 8; }
            else if(DF.encrypt_list.value == 3) // 3DES
            { expected_len = 24; }
            else if(DF.encrypt_list.value == 4) // AES128
            { expected_len = 16; }
            else if(DF.encrypt_list.value == 5) // AES192
            { expected_len = 24; }
            else if(DF.encrypt_list.value == 6) // AES256
            { expected_len = 32; }

			str_len = getValLen(DF.in_encrypt_key.value);
			elem = DF.in_encrypt_key;
			
            if(expected_len > 0 && str_len != expected_len)
            {
                alert(js_encryp_key_length_error="The length of encryption key is incorrect!");
				if(elem)
				{
					elem.focus();
					elem.select();
				}
				return false;
            }
            if (expected_len > 0 && str_len > 32)
			{
				alert(js_encryp_key_too_long="The max length of encryption key is 32!");
				if(elem)
				{
					elem.focus();
					elem.select();
				}
				return false;
			}
            if (expected_len > 0 && !is_key_valid(DF.in_encrypt_key.value))
            {
				if(elem)
				{
					elem.focus();
					elem.select();
				}
				return false;
            }
			
			str_len = getValLen(DF.out_encrypt_key.value);
			elem = DF.out_encrypt_key;
			
            if(expected_len > 0 && str_len != expected_len)
            {
                alert(js_encryption_length_error="The length of encryption key is incorrect!");
				if(elem)
				{
					elem.focus();
					elem.select();
				}
				return false;
            }
            if (expected_len > 0 && str_len > 32)
			{
				alert(js_encryp_too_long="The max length of encryption is 32!");
				if(elem)
				{
					elem.focus();
					elem.select();
				}
				return false;
			}
            if(expected_len > 0 && !is_key_valid(DF.out_encrypt_key.value))
            {
				if(elem)
				{
					elem.focus();
					elem.select();
				}
				return false;
            }
		}
	}
	
	


	return true;
}
function ctrlsInit()
{
	var DF = document.forms[0];
	var temp = 0;
	
	DF.enable.value = ipsec_adv_dyn_array[0];
	DF.ipsec_name.value = ipsec_adv_dyn_array[1];
	DF.local_net_ip.value = ipsec_adv_dyn_array[2];
	if (ipsec_adv_dyn_array[3] > 0)
	{
		DF.local_net_msk.value = ipsec_adv_dyn_array[3];
	}
	DF.peer_net_ip.value = ipsec_adv_dyn_array[4];
	
	if (ipsec_adv_dyn_array[5] > 0)
	{
		DF.peer_net_msk.value = ipsec_adv_dyn_array[5];
	}
	DF.peer_gw.value = ipsec_adv_dyn_array[6];
	
	var radio = ipsec_adv_dyn_array[7]?0:1;
	DF.ike_enable[radio].checked = true;


	/* IKE */
	if (ipsec_adv_dyn_array[20] == 0)
	{
		DF.ike_list.value = 255;
	}
	else
	{
		DF.ike_list.value = ipsec_adv_dyn_array[8];
	}
	DF.pfs_list.value = ipsec_adv_dyn_array[9];
	DF.life_time.value = ipsec_adv_dyn_array[10];
	DF.proto_list_ike.value = ipsec_adv_dyn_array[11];
	DF.auth_list_ike.value = ipsec_adv_dyn_array[12];
	DF.encrypt_list_ike.value = ipsec_adv_dyn_array[13];
	
	/* manu */
	DF.proto_list.value = ipsec_adv_dyn_array[11];
    DF.auth_list.value = (ipsec_adv_dyn_array[12]>0)? ipsec_adv_dyn_array[12]:2;
    DF.encrypt_list.value = (ipsec_adv_dyn_array[13]>0)? ipsec_adv_dyn_array[13]:6;
	
	if (ipsec_adv_dyn_array[14] > 0)
	{
		DF.in_spi.value = ipsec_adv_dyn_array[14];
	}
	DF.in_auth_key.value = ipsec_adv_dyn_array[15];
	DF.in_encrypt_key.value = ipsec_adv_dyn_array[16];
	
	if (ipsec_adv_dyn_array[17] > 0)
	{
		DF.out_spi.value = ipsec_adv_dyn_array[17];
	}
	DF.out_auth_key.value = ipsec_adv_dyn_array[18];
	DF.out_encrypt_key.value = ipsec_adv_dyn_array[19];
	
	switchMode();
	switchAuthType();
    switchEncryptType();
	switchProto();
    switchProtoIke();

	document.forms[0].Changed.value = ipsec_adv_dyn_array[21];
	document.forms[0].SelIndex.value = ipsec_adv_dyn_array[22];
    document.forms[0].Page.value = ipsec_adv_dyn_array[23];
}
//--></script></head>

<BODY onload="ctrlsInit(); LoadHelp('IpsecHelpRpm.htm');setTagStr(document,'ntw_ipsec_adv_cfg'); resize(this);" onResize="resize(this);">
<center><form action="IpsecRpm.htm" enctype="multipart/form-data" method="get" onSubmit="return doSubmit();">
<table id="autoWidth" border="0" cellspacing="0" cellpadding="0">
<TR><TD class=h1 colspan=2 id ="t_ipsec_setting">IPsec Policy Settings</TD></TR>

<TR><TD class=blue colspan=2></TD></TR>

<TR>
	<TD>
		<TABLE>
			<TR>
				<TD class="Item" width="150" id="t_policy_name">Policy Name:</TD>
				<TD class=emp width="320">
					<input name="ipsec_name" type="text" class="text" value="" size="24" maxlength="31">
				</TD>
			</TR>
			
			<TR>
				<TD class="Item" width="150" id="t_local_subnet">Local Subnet:</TD>
				<TD class=emp width="320">
					<input name="local_net_ip" type="text" class="text" value="" size="24" maxlength="15"> / 
					<input name="local_net_msk" type="text" class="text" value="" size="2" maxlength="2">
				</TD>
			</TR>
			
			<TR>
				<TD class="Item" width="150" id="t_peer_subnet">Peer Subnet:</TD>
				<TD class=emp width="320">
					<input name="peer_net_ip" type="text" class="text" value="" size="24" maxlength="15"> / 
					<input name="peer_net_msk" type="text" class="text" value="" size="2" maxlength="2">
				</TD>
			</TR>
			
			<TR>
				<TD class="Item" width="150" id="t_peer_gateway">Peer Gateway:</TD>
				<TD width="320">
					<input name="peer_gw" type="text" class="text" value="" size="24" maxlength="63"><span id="t_domain">(IP or domain name)</span>
				</TD>
			</TR>
			
			<TR>
				<TD class="Item" width="150" id="t_negotia_mode">Negotiation Mode:</TD>
				<TD width="320">
					<input name="ike_enable" type="radio" value="1" Checked onClick="switchMode()"><span id="t_ike_negotia">IKE negotiation</span>&nbsp;&nbsp;
					<input name="ike_enable" type="radio" value="0" onClick="switchMode()"><span id="t_manual_mode">Manual mode</span>
				</TD>
			</TR>
			
			<tr id="id_proto_ike" style="display:none">
				<TD class="Item" width="150" id="t_sec_protocol">Security Protocol:</TD>
				<TD class=emp width="320">
					<select size="1" name="proto_list_ike" class="list" onChange="switchProtoIke()">
						<option value="0">AH</option>
						<option value="1">ESP</option>
					</select>
				</TD>
			</TR>
			
			<tr id="id_auth_ike" style="display:none">
				<TD class="Item" width="150" id="t_ayth_algotithm">Authentication Algorithm:</TD>
				<TD class=emp width="320">
					<select size="1" name="auth_list_ike" class="list">
						<script language="JavaScript">printfAuthList(true);</script>
					</select>
				</TD>
			</TR>
			
			<tr id="id_encrypt_ike" style="display:none">
				<TD class="Item" width="150" id="t_encryp_algorithm">Encryption Algorithm:</TD>
				<TD class=emp width="320">
					<select size="1" name="encrypt_list_ike" class="list">
						<script language="JavaScript">printfEncryptList(true);</script>
					</select>
				</TD>
			</TR>
			
			<tr id="id_ike_method" style="display:none">
				<TD class="Item" width="150" id="t_ike_sec_policy">IKE Security Policy:</TD>
				<TD class=emp width="320">
				<select size="1" name="ike_list" class="list" onchange="">
					<script language="JavaScript">printfIkeList();</script>
				</select>&nbsp;&nbsp;
				<a href="IkeRpm.htm?Add=Add&ManPage=1"><font color="#FF0000" id="t_click_tips">Click here to add IKE list</font></a>
				</TD>
			</TR>

			<tr id="id_pfs" style="display:none">
				<TD class="Item" width="150" id="t_pfs_group">PFS Group:</TD>
				<TD class=emp width="320">
					<select size="1" name="pfs_list" class="list" onchange="">
						<script language="JavaScript">printfPfsGroupList();</script>
					</select>
				</TD>
			</TR>

			<tr id="id_life_time" style="display:none">
				<TD class="Item" width="150" id="t_lifetime">Lifetime:</TD>
				<TD width="320">
					<input name="life_time" type="text" class="text" value="" size="6" maxlength="6"> <span id="t_second">seconds (60-604800)</span>
				</TD>
			</TR>

			<tr id="id_proto" style="display:none">
				<TD class="Item" width="150" id="t_sec_protocol">Security Protocol:</TD>
				<TD class=emp width="320">
					<select size="1" name="proto_list" class="list" onchange="switchProto();">
						<option value="0">AH</option>
						<option value="1">ESP</option>
					</select>
				</TD>
			</TR>
			
			<tr id="id_auth" style="display:none">
				<TD class="Item" width="150" id="t_auth_algorithm">Authentication Algorithm:</TD>
				<TD class=emp width="320">
					<select size="1" name="auth_list" class="list" onchange="switchAuthType();">
						<script language="JavaScript">printfAuthList(false);</script>
					</select>
				</TD>
			</TR>

			<tr id="id_encrypt" style="display:none">
				<TD class="Item" width="150" id="t_encryp_algorithm">Encryption Algorithm:</TD>
				<TD class=emp width="320">
					<select size="1" name="encrypt_list" class="list" onchange="switchEncryptType();">
						<script language="JavaScript">printfEncryptList(false);</script>
					</select>
				</TD>
			</TR>

			<tr id="id_in_spi" style="display:none">
				<TD class="Item" width="150" id="t_in_spi">In SPI:</TD>
				<TD width="320">
					<input name="in_spi" type="text" class="text" value="" size="12" maxlength="10">&nbsp &nbsp(256-4294967295)
				</TD>
			</TR>

			<tr id="id_in_auth_key" style="display:none">
				<TD class="Item" width="150" id="t_in_auth_key">In Authentication Key:</TD>
				<TD width="320">
					<input name="in_auth_key" type="text" class="text" value="" size="24" maxlength="20">&nbsp; &nbsp;<span id="span_in_auth_key">-</span>
				</TD>
			</TR>

			<tr id="id_in_encrypt_key" style="display:none">
				<TD class="Item" width="150" id="t_in_encry_key">In Encryption Key:</TD>
				<TD width="320">
					<input name="in_encrypt_key" type="text" class="text" value="" size="32" maxlength="32">&nbsp; &nbsp;<span id="span_in_encrypt_key">-</span>
				</TD>
			</TR>
			
			<tr id="id_out_spi" style="display:none">
				<TD class="Item" width="150" id="t_out_spi">Out SPI:</TD>
				<TD width="320">
					<input name="out_spi" type="text" class="text" value="" size="12" maxlength="10">&nbsp; &nbsp;(256-4294967295)
				</TD>
			</TR>

			<tr id="id_out_auth_key" style="display:none">
				<TD class="Item" width="150" id="t_out_auth_key">Out Authentication Key:</TD>
				<TD width="320">
					<input name="out_auth_key" type="text" class="text" value="" size="24" maxlength="20">&nbsp; &nbsp;<span id="span_out_auth_key">-</span>
				</TD>
			</TR>

			<tr id="id_out_encrypt_key" style="display:none">
				<TD class="Item" width="150" id="t_out_encryp_key">Out Encryption Key:</TD>
				<TD width="320">
					<input name="out_encrypt_key" type="text" class="text" value="" size="32" maxlength="32">&nbsp; &nbsp;<span id="span_out_encrypt_key">-</span>
				</TD>
			</TR>			
			<tr>
				<td class="Item" width="150" id="t_enable">Enable:</td>
				<TD>
					<select size="1" name="enable" class="list" onchange="">
						<option value="1"  id="t_enabled">Enable</option>
						<option value="0" id="t_disabled">Disable</option>
					</select>
				</TD>
			</tr>
		</TABLE>
	</TD>	
</TR>

<TR><TD class=blue colspan=2></TD></TR>

<TR>	
	<TD class =" mbtn">	
		<input name="Changed" type="hidden" value="">
		<input name="SelIndex" type="hidden" value="">
		<input name="Page" type="hidden" value="">
		
		<input name="Save" type="submit" class="buttonBig" value="Save" onClick="return doSubmit();">
		&nbsp;&nbsp;
		<input name="Back" type="button" class="buttonBig" onClick="doBack(ipsec_adv_dyn_array[23]);" value="Back">
	</TD>
</TR>
</TABLE>
</form></center></BODY><head><meta http-equiv="pragma" content="no-cache"></head></HTML>
